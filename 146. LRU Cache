class LRUCache:

    def __init__(self, capacity: int):
        from collections import OrderedDict
        self.capacity = capacity
        self.current_capacity = 0
        self.dic = OrderedDict()

    def get(self, key: int) -> int:
        if key in self.dic:
            value = self.dic[key]
            self.dic.pop(key)
            self.dic[key]=value
            return value
        else:
            return -1
        

    def put(self, key: int, value: int) -> None:
        
        if key in self.dic:
            self.dic.pop(key)
            self.dic[key] = value
            
        else:
            if self.current_capacity == self.capacity:
                self.dic.popitem(last = False)
                self.dic[key]=value
                
            else:
                self.dic[key]=value
                self.current_capacity+=1
                
        #print(self.dic)

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
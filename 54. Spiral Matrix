class Solution(object):
    def decrease_row(self):
        if self.i == self.min_row:
            self.ans.append(self.matrix[self.i][self.j])
            return
        while self.i > self.min_row:
            self.ans.append(self.matrix[self.i][self.j])
            self.i-=1
        
        self.min_row+=1
        self.increase_column()
        
    def decrease_column(self):
        if self.j == self.min_column:
            self.ans.append(self.matrix[self.i][self.j])
            return
        while self.j > self.min_column:
            self.ans.append(self.matrix[self.i][self.j])
            self.j-=1
        
        self.min_column+=1
        self.decrease_row()
        
    def increase_row(self):
        if self.i == self.max_row:
            self.ans.append(self.matrix[self.i][self.j])
            return 
        while self.i < self.max_row:
            self.ans.append(self.matrix[self.i][self.j])
            self.i+=1
        
        self.max_row-=1
        self.decrease_column()
        
    def increase_column(self):
        if self.j == self.max_column:
            self.ans.append(self.matrix[self.i][self.j])
            return 
        while self.j < self.max_column:
            self.ans.append(self.matrix[self.i][self.j])
            self.j+=1
        
        self.max_column-=1
        self.increase_row()
    
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        
        if not matrix:
            return []
        
        self.matrix=matrix
        self.min_row = 1
        self.min_column = 0
        self.max_row = len(matrix)-1
        self.max_column = len(matrix[0])-1
        
        self.ans=[]
        
        self.i = self.j = 0
        
        if self.max_column==0:
            self.increase_row()
            
        else:
            self.increase_column()
        
        
        
        return self.ans
        
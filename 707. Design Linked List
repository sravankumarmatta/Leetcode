class Node:
    def __init__(self, val=None):
        self.val = val
        self.next = None

class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head = Node()
        self.length = -1
        
        

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if index>self.length: return -1
        
        ptr = self.head.next
        
        while index:
            ptr= ptr.next
            index-=1
            
        return ptr.val
        #print(self.length)
        

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        temp = self.head.next
        self.head.next = Node(val)
        self.head.next.next = temp
        self.length+=1
        #print(self.length)

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        ptr = self.head
        
        while ptr.next:
            ptr = ptr.next
            
        ptr.next = Node(val)
        
        self.length+=1
        #print(self.length)

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        if index>self.length+1: return None
        
        ptr = self.head
        
        while index:
            ptr= ptr.next
            index-=1
            
        temp = ptr.next
        ptr.next = Node(val)
        ptr.next.next = temp
        
        self.length+=1
        #print(self.length)
        

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if index>self.length: return None
        
        ptr = self.head
        
        while index:
            ptr= ptr.next
            index-=1
            
        ptr.next = ptr.next.next
        
        self.length-=1
        #print(self.length)
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def helper(self, left_index, right_index):
        if left_index > right_index:
            return [None]
        
        if (left_index, right_index) in self.d:
            return self.d[(left_index, right_index)]
        
        ans = []
        
        for i in range(left_index, right_index+1):
            root_left =self.helper(left_index,i-1)
            root_right =self.helper(i+1,right_index)
            
            for left in root_left:
                for right in root_right:
                    root = TreeNode(i)
                    root.left = left
                    root.right = right
                    
                    ans.append(root)
                    
        self.d[(left_index, right_index)] = ans
        return ans
        
    def generateTrees(self, n: int) -> List[TreeNode]:
        
        ans = []
        
        self.d={}
        
        for i in range(1,n+1):
            #print(i)
            #print(1,i-1)
            root_left =self.helper(1,i-1)
            root_right =self.helper(i+1,n)
            #print(root_left)
            for left in root_left:
                for right in root_right:
                    
                    root = TreeNode(i)
                    root.left = left
                    root.right = right
                    
                    ans.append(root)
                    
        return ans